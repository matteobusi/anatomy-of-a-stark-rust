use std::ops::{Add, BitXor, Div, Mul, Neg, Rem, Sub};

use finite_fields::IntPG;

use crate::degree::*;

#[derive(Debug, Clone)]
pub struct Polynomial {
    pub coefficients: Vec<IntPG>,
}

impl PartialEq for Polynomial {
    fn eq(&self, other: &Self) -> bool {
        (self.is_zero() && other.is_zero()) || self.coefficients == other.coefficients
    }
}

impl Eq for Polynomial {}

impl Neg for Polynomial {
    type Output = Self;

    fn neg(self) -> Polynomial {
        Polynomial {
            coefficients: self.coefficients.iter().map(|c| -(*c)).collect(),
        }
    }
}

impl Add for Polynomial {
    type Output = Self;

    fn add(self, rhs: Polynomial) -> Polynomial {
        if rhs.clone().degree() == Degree::MinusInf {
            self
        } else if self.degree() == Degree::MinusInf {
            rhs
        } else {
            let mut coefficients =
                vec![IntPG::ZERO; self.coefficients.len().max(rhs.coefficients.len())];

            for i in 0..self.coefficients.len() {
                coefficients[i] += self.coefficients[i];
            }

            for i in 0..rhs.coefficients.len() {
                coefficients[i] += rhs.coefficients[i];
            }

            Polynomial { coefficients }
        }
    }
}

impl Sub for Polynomial {
    type Output = Self;

    fn sub(self, rhs: Polynomial) -> Polynomial {
        self.add(-rhs)
    }
}

impl Mul for Polynomial {
    type Output = Self;

    fn mul(self, rhs: Polynomial) -> Polynomial {
        if self.degree() == Degree::MinusInf || rhs.degree() == Degree::MinusInf {
            Polynomial::ZERO
        } else {
            let mut coefficients =
                vec![IntPG::ZERO; self.coefficients.len() + rhs.coefficients.len() - 1]; // The -1 is there because the 0th element of the coefficient's vector is the 0-th degree variable

            for i in 0..self.coefficients.len() {
                if self.coefficients[i] == IntPG::ZERO {
                    continue; // Early exit for 0 coefficients
                }

                for j in 0..rhs.coefficients.len() {
                    coefficients[i + j] += self.coefficients[i] * rhs.coefficients[j]
                }
            }

            Polynomial { coefficients }
        }
    }
}
pub struct DivOutput {
    pub quotient: Polynomial,
    pub remainder: Polynomial,
}

impl Div for Polynomial {
    type Output = DivOutput;

    fn div(self, denominator: Polynomial) -> DivOutput {
        match (self.degree(), denominator.degree()) {
            (_, Degree::MinusInf) => panic!("The ZERO polynomial is not a valid denominator!"),
            (Degree::MinusInf, _) => DivOutput {
                quotient: Polynomial::ZERO,
                remainder: Polynomial::ZERO,
            },
            (Degree::Poly(n), Degree::Poly(m)) => {
                let mut rem = self.clone();
                let mut quotient_coeff = vec![IntPG::ZERO; (n - m + 1) as usize];

                while rem.degree() >= Degree::Poly(m) {
                    let coeff = rem.leading_coefficient() / denominator.leading_coefficient();
                    let shift = (rem.degree() - Degree::Poly(m)).unwrap();
                    let mut sub_coefficients = vec![IntPG::ZERO; shift as usize];
                    sub_coefficients.push(coeff);
                    quotient_coeff[shift as usize] = coeff;
                    let sub = (Polynomial {
                        coefficients: sub_coefficients,
                    }) * denominator.clone();

                    rem = rem - sub;
                }

                DivOutput {
                    quotient: Polynomial {
                        coefficients: quotient_coeff,
                    },
                    remainder: rem,
                }
            }
        }
    }
}

impl Rem for Polynomial {
    type Output = Polynomial;

    fn rem(self, rhs: Polynomial) -> Polynomial {
        let DivOutput {
            quotient: _,
            remainder,
        } = self.div(rhs);

        remainder
    }
}

/// We use the bitwise xor notation (^) to denote exponentiation of the polynomial
impl BitXor<IntPG> for Polynomial {
    type Output = Polynomial;

    fn bitxor(self, exp: IntPG) -> Self::Output {
        if self.is_zero() {
            Polynomial::ZERO
        } else if exp == IntPG::ZERO {
            Polynomial::ONE()
        } else {
            let mut _base = self.clone();
            let mut _exp = exp;
            let two_ff = IntPG::from(2);

            let mut res = Polynomial::ONE();
            while _exp > IntPG::ZERO {
                if _exp % two_ff == IntPG::ONE {
                    res = res * _base.clone();
                }

                _base = _base.clone() * _base.clone();
                _exp >>= 1; // FIXME: investigate if this works
            }

            res
        }
    }
}

impl Polynomial {
    pub fn new(coefficients: &[IntPG]) -> Polynomial {
        Polynomial {
            coefficients: coefficients.to_vec(),
        }
    }

    pub const ZERO: Polynomial = Polynomial {
        coefficients: vec![],
    };

    #[allow(non_snake_case)]
    pub fn ONE() -> Polynomial {
        Polynomial {
            coefficients: vec![IntPG::ONE],
        }
    }

    pub fn degree(&self) -> Degree {
        if self.coefficients.is_empty() {
            Degree::MinusInf
        } else {
            let mut deg = Degree::MinusInf;
            for i in 0..self.coefficients.len() {
                if self.coefficients[i] != IntPG::ZERO {
                    deg = Degree::Poly(i as u128);
                }
            }

            deg
        }
    }

    pub fn is_zero(&self) -> bool {
        self.degree() == Degree::MinusInf
    }

    pub fn leading_coefficient(&self) -> IntPG {
        match self.degree() {
            Degree::MinusInf => {
                panic!("Cannot extract the leading coefficient from the ZERO polynomial")
            }
            Degree::Poly(k) => self.coefficients[k as usize],
        }
    }

    pub fn evaluate(&self, x: &IntPG) -> IntPG {
        let mut xi = IntPG::ONE;
        let mut value = IntPG::ZERO;

        for c in &self.coefficients {
            value += (*c) * xi;
            xi *= *x;
        }

        value
    }

    pub fn evaluate_domain(&self, domain: &[IntPG]) -> Vec<IntPG> {
        domain.iter().map(|p| self.evaluate(p)).collect()
    }

    /// Given a non-empty vector of <x, f(x)> pairs computes the polynomial corresponding to the pairs.
    pub fn interpolate(domain: &[IntPG], values: &[IntPG]) -> Self {
        // Panics if no points are given or domain and values have different len
        assert!(!domain.is_empty());
        assert_eq!(domain.len(), values.len());

        // We use Langrange interpolation naively
        let x = Polynomial::new(&[IntPG::ZERO, IntPG::ONE]); // this is x
        // dbg!(x.clone());
        let mut res = Polynomial::new(&[]); // this is our resulting polynomial, initially empty
        // dbg!(res.clone());

        for i in 0..values.len() {
            let mut prod = Polynomial::new(&[values[i]]);
            // dbg!(prod.clone());
            for j in 0..domain.len() {
                if j != i {
                    let xj = Polynomial::new(&[domain[j]]);
                    // dbg!(xj.clone());
                    let den = Polynomial::new(&[(domain[i] - domain[j]).inverse()]);
                    // dbg!(den.clone());
                    prod = prod * ((x.clone() - xj) * den);
                    // dbg!(prod.clone());
                    // let den = Polynomial::new(&[(domain[i] - domain[j])]);
                    // prod = prod * ((x.clone() - xj) / den).quotient;
                }
            }
            res = res + prod;
            // dbg!(res.clone());
        }

        // dbg!(res.clone());
        res
    }

    /// Returns the (minimal) polynomial vanishing on the given points, i.e.,
    /// Given D = { d1, ..., dn }, the vanishing polynomial (or zerofier) is
    /// (x - d1) ... (x - dn)
    pub fn zerofier(domain: &Vec<IntPG>) -> Polynomial {
        let x = Polynomial::new(&[IntPG::ZERO, IntPG::ONE]); // this is x
        let mut res = Polynomial::new(&[]); // this is our resulting polynomial, initially empty

        for d in domain {
            let di = Polynomial::new(&[*d]);
            res = res * (x.clone() - di)
        }

        res
    }

    pub fn scale(self, factor: IntPG) -> Polynomial {
        Polynomial {
            coefficients: self
                .coefficients
                .iter()
                .enumerate()
                .map(|(i, ci)| ((factor ^ IntPG::from(i)) * (*ci)))
                .collect(),
        }
    }

    pub fn test_colinearity(points: &[(IntPG, IntPG)]) -> bool {
        let (domain, values): (Vec<IntPG>, Vec<IntPG>) = points.iter().cloned().unzip();
        let polynomial = Polynomial::interpolate(&domain, &values);

        polynomial.degree() <= Degree::Poly(1)
    }
}

// A few quick tests
#[cfg(test)]
mod tests {
    use super::*;

    use crypto_bigint::U512;

    #[test]
    fn test_neg() {
        let v = IntPG::from(42);
        assert_eq!(
            -Polynomial {
                coefficients: vec![v; 10]
            },
            Polynomial {
                coefficients: vec![-v; 10]
            }
        )
    }

    #[test]
    fn test_add() {
        let c1 = IntPG::from(42);
        let c2 = IntPG::from(7);
        let csum1 = IntPG::from(49);
        let csum2 = IntPG::from(42);

        let p1 = Polynomial {
            coefficients: vec![c1; 10],
        };
        let p2 = Polynomial {
            coefficients: vec![c2; 4],
        };

        let csum_vec = vec![
            csum1, csum1, csum1, csum1, csum2, csum2, csum2, csum2, csum2, csum2,
        ];

        let psum = Polynomial {
            coefficients: csum_vec,
        };
        assert_eq!(p1 + p2, psum)
    }

    #[test]
    fn test_mul_distr() {
        let a = Polynomial {
            coefficients: [0, 5, 5, 2].iter().map(|x| (IntPG::from(*x))).collect(),
        };
        let b = Polynomial {
            coefficients: [2, 2, 1].iter().map(|x| (IntPG::from(*x))).collect(),
        };

        let c = Polynomial {
            coefficients: [0, 5, 2, 5, 5, 1]
                .iter()
                .map(|x| (IntPG::from(*x)))
                .collect(),
        };

        assert_eq!(
            a.clone() * (b.clone() + c.clone()),
            a.clone() * b.clone() + a.clone() * c.clone()
        )
    }
    #[test]
    fn test_mul_comm() {
        let a = Polynomial {
            coefficients: [0, 5, 5, 2].iter().map(|x| (IntPG::from(*x))).collect(),
        };
        let b = Polynomial {
            coefficients: [2, 2, 1].iter().map(|x| (IntPG::from(*x))).collect(),
        };

        assert_eq!(a.clone() * b.clone(), b.clone() * a.clone())
    }

    #[test]
    fn test_div_exact() {
        let a = Polynomial {
            coefficients: [1, 0, 5, 2].iter().map(|x| (IntPG::from(*x))).collect(),
        };
        let b = Polynomial {
            coefficients: [2, 2, 1].iter().map(|x| (IntPG::from(*x))).collect(),
        };

        let DivOutput {
            quotient,
            remainder,
        } = (a.clone() * b.clone()) / b.clone();
        assert_eq!(quotient, a);
        assert!(remainder.is_zero());
    }

    #[test]
    fn test_div_non_zero_rem() {
        let a = Polynomial {
            coefficients: [1, 0, 5, 2].iter().map(|x| (IntPG::from(*x))).collect(),
        };
        let b = Polynomial {
            coefficients: [2, 2, 1].iter().map(|x| (IntPG::from(*x))).collect(),
        };

        let c = Polynomial {
            coefficients: [0, 5, 2, 5, 5, 1]
                .iter()
                .map(|x| (IntPG::from(*x)))
                .collect(),
        };

        let DivOutput {
            quotient: _,
            remainder,
        } = (a.clone() * b.clone()) / c.clone();
        assert!(!remainder.is_zero());
    }

    #[test]
    fn test_div_ok() {
        let a = Polynomial {
            coefficients: [1, 0, 5, 2].iter().map(|x| (IntPG::from(*x))).collect(),
        };
        let b = Polynomial {
            coefficients: [2, 2, 1].iter().map(|x| (IntPG::from(*x))).collect(),
        };

        let c = Polynomial {
            coefficients: [0, 5, 2, 5, 5, 1]
                .iter()
                .map(|x| (IntPG::from(*x)))
                .collect(),
        };

        let DivOutput {
            quotient,
            remainder,
        } = (a.clone() * b.clone()) / c.clone();
        assert_eq!(quotient * c + remainder, a * b);
    }

    #[test]
    fn test_exp() {
        let a = Polynomial {
            coefficients: [0, 5, 2, 5, 5, 1]
                .iter()
                .map(|x| (IntPG::from(*x)))
                .collect(), // x+1
        };

        assert_eq!(
            a.clone() ^ IntPG::from(7),
            a.clone() * a.clone() * a.clone() * a.clone() * a.clone() * a.clone() * a.clone()
        );
    }

    #[test]
    fn test_interpolate() {
        let values: Vec<_> = [5, 2, 2, 1, 5, 0].iter().map(|x| IntPG::from(*x)).collect();
        let domain: Vec<_> = [1, 2, 3, 4, 5, 6].iter().map(|x| IntPG::from(*x)).collect();
        let res = Polynomial::interpolate(&domain, &values);
        let pairs = domain.iter().zip(&values);

        for (&x, &y) in pairs.clone() {
            assert_eq!(res.evaluate(&x), y);
        }

        assert_eq!(res.evaluate_domain(&domain), values);

        assert_eq!(res.degree(), Degree::Poly((pairs.len() - 1) as u128))
    }

    #[test]
    fn test_interpolate_hard() {
        let last_domain : Vec<IntPG> = ["00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070439E84C7B60601F37CB45B1F98D373", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008C0327E1D90D294ED1065674335548E9", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006537F6002965C04AD9720C633ED43306", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000064C67A557940A1A6BF5F894F3B5B4AF4"] // "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000353DE29A4355F19E04CF5123C725FA96", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007521C1AC86D518DDB1CED63327E6E26F", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041AACE04DF298E5326D747B1FD323831", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B69D608842A9C482670F9348AB85682C", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000053871AD25A37F98CF62C2BB5D9DE59BE", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066431BD9C37C606B66E4B2C6867CE364", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000062484819D8D40988B71C61463B7F56DB", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B1F73FC5B19B51790BE7DA5CBBBAC9EF", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AD93EA8B344D1B959019336AC6669CBB", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BEDE4A6DB8480FEB945B7361FA943F46", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A79806FA39C8A0F289D3C8CA4CA087D3", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ACA4A7AD10D50D1BF02A47AF11947D8", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000067E7C4153E4A0448A84E96F82BD7B802", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006A8F5CD13926CAA7D83BC1CF71B118B7", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B3D0F49C11B4F668498B564CACC0DE74", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005F933836C6C3A80329E6E6C1E4825C50", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A71775AE2060D2103E3076D883E5FA63", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001F4B2F5E03625311C5D903FBA350720E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000165B788C50C9EAB8DF4A63F7C3FC5E0D", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A6BC4468FCDB0E495E3F400D5A35E250", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004D57BC8718E97E61510F9B50297A49E1", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000055E465500B037A1688A9985415CD9694", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000085979EC86EB01AF0C6BCCD6857E8E2B3", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005A5165A3D4F4CF22688631C142EBF325", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003BD8590C85304B7221F88650FB2F6B31", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001373524392CDDA0344138AC2EB329F7F", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008106AA0F04FBECD620BC14FC0228BF79", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009962E0F7F6271EE75D066123CB55B81E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CA95395D499D49E15894199AB75450E7", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008CF6600C61D156A67928E61140167042", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003E065BAF1EBF429B5CA2D51C5BF5F159", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BC01C5E54E6A3A946B980EEFDC72B0F3", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005C214A72C72D4345C1E222A83D8F63E7", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001C295416158C3D9B7EA87F218FDCE8DC", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008CAA7F5D2CFD14CE74D9E143CE071008", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F5330A2A6E3B190B59C2CC6AD8E7E87", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000947E400161783F446A9269F2E30B7917", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000019521787A380CBFFDE8B4D0863947021", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004D23F276663295F1FBF2D0284336C05E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B36EA5C1617832043262C31EF5EA8D7A", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000D281E94BC6C6301699217E0E61C729B", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004F4335C6950316EA1E60E991B360668A", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009F05040088774FBF05DD03331717DD44", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B7CFEA101FAFB267D6825A5243E43118", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009DD98EDA3B9349D906EACA386BCF97DE", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002102D2A28153DCBC561C84A1F0EBEC4D", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007AA813BCEE1268F229D4DBA1877A8C0A", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AB148B445BDECE00B2E4F1D759CAA52C", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022287BC3327E9772524FFA3E6DA4828E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A7B633007639D0D949C0D8BD3112DA57", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008333C396673A7D4181522088699EB2ED", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002A1733CECCE9C01EC2CF1836AF45A3B1", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000798FFE326C9DBD0B87EFD06D2ABA35F9", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ACB1BDE87D512D64915DCBA3E53BC3D3", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000156C9AC01A299275B3B8C744BE13FD0C", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008E40F4B6B69E11622238C8DC66DD37F5", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BCCD28E5C1959062C4F32D6914022E76", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001C69CD7B4184C2E71E891B21903B2D41", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000724F79E09CE7221CC1B5BE44F70727CA", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BDDC06FA79E4EDCF50A5A522A651C4D9", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005B3C617B3849F9FE0C834BA4E0672C8E", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003F7CD81E26F2D6B12EF9A98BCCAAB718", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000664809FFD69A3FB5268DF39CC12BCCFB", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000066B985AA86BF5E5940A076B0C4A4B50D", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000096421D65BCAA0E61FB30AEDC38DA056B", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000565E3E53792AE7224E3129CCD8191D92", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000089D531FB20D671ACD928B84E02CDC7D0", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000014E29F77BD563B7D98F06CB7547A97D5", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000077F8E52DA5C8067309D3D44A2621A643", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000653CE4263C839F94991B4D3979831C9D", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006937B7E6272BF67748E39EB9C480A926", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001988C03A4E64AE86F41825A344453612", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001DEC1574CBB2E46A6FE6CC9539996346", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000CA1B59247B7F0146BA48C9E056BC0BB", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023E7F905C6375F0D762C3735B35F782E", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070B5B5852EF2AF2E40FD5B850EE6B829", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063983BEAC1B5FBB757B16907D42847FF", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060F0A32EC6D9355827C43E308E4EE74A", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017AF0B63EE4B0997B674A9B3533F218D", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006BECC7C9393C57FCD619193E1B7DA3B1", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024688A51DF9F2DEFC1CF89277C1A059E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AC34D0A1FC9DACEE3A26FC045CAF8DF3", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B5248773AF36154720B59C083C03A1F4", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024C3BB970324F1B6A1C0BFF2A5CA1DB1", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007E284378E716819EAEF064AFD685B620", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000759B9AAFF4FC85E9775667ABEA32696D", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000045E86137914FE50F39433297A8171D4E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000712E9A5C2B0B30DD9779CE3EBD140CDC", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008FA7A6F37ACFB48DDE0779AF04D094D0", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B80CADBC6D3225FCBBEC753D14CD6082", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004A7955F0FB041329DF43EB03FDD74088", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000321D1F0809D8E118A2F99EDC34AA47E3", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000EAC6A2B662B61EA76BE66548ABAF1A", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003E899FF39E2EA95986D719EEBFE98FBF", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008D79A450E140BD64A35D2AE3A40A0EA8", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000F7E3A1AB195C56B9467F110238D4F0E", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006F5EB58D38D2BCBA3E1DDD57C2709C1A", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AF56ABE9EA73C264815780DE70231725", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003ED580A2D302EB318B261EBC31F8EFF9", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005C2CCF5D591C4E6F4A63D3395271817A", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003701BFFE9E87C0BB956D960D1CF486EA", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B22DE8785C7F34002174B2F79C6B8FE0", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007E5C0D8999CD6A0E040D2FD7BCC93FA3", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000018115A3E9E87CDFBCD9D3CE10A157287", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000BE57E16B43939CFE966DE81F19E38D66", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007C3CCA396AFCE915E19F166E4C9F9977", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002C7AFBFF7788B040FA22FCCCE8E822BD", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013B015EFE0504D98297DA5ADBC1BCEE9", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002DA67125C46CB626F91535C794306823", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AA7D2D5D7EAC2343A9E37B5E0F1413B4", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000050D7EC4311ED970DD62B245E788573F7", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000206B74BBA42131FF4D1B0E28A6355AD5", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A957843CCD81688DADB005C1925B7D73", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000023C9CCFF89C62F26B63F2742CEED25AA", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000484C3C6998C582BE7EADDF7796614D14", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000A168CC3133163FE13D30E7C950BA5C50", "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000051F001CD936242F478102F92D545CA08", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001ECE421782AED29B6EA2345C1AC43C2E", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000B613653FE5D66D8A4C4738BB41EC02F5", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003D3F0B494961EE9DDDC737239922C80C", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000EB2D71A3E6A6F9D3B0CD296EBFDD18B", "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000AF163284BE7B3D18E176E4DE6FC4D2C0", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005930861F6318DDE33E4A41BB08F8D837", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000DA3F905861B1230AF5A5ADD59AE3B28"]
        .iter().map(|x| IntPG::constant(&U512::from_be_hex(x))).collect();

        let last_cw : Vec<IntPG> = ["FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF97B85FC3FACBAD7084CAF39293D273AF" , "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF6CF95C0B6B459F6D2C06D815CD9E8EB0", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0F84E5B959C267E1169EABE8C658CC1", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007655E0F19802F30E2915BBD5F9018C3D"]

        .iter().map(|x| IntPG::constant(&U512::from_be_hex(x))).collect();

        // let domain : Vec<_> = [1, 9, 10].iter().map(|x| IntPG::constant(*x) ).collect();
        //let values : Vec<_> = [15, 295, 357].iter().map(|x| IntPG::constant(*x) ).collect();
        let res = Polynomial::interpolate(&last_domain, &last_cw);
        let pairs = last_domain.iter().zip(&last_cw);

        for i in 0..last_domain.len() {
            assert_eq!(res.evaluate(&last_domain[i]), last_cw[i]);
        }

        assert_eq!(res.evaluate_domain(&last_domain), last_cw);

        assert_eq!(res.degree(), Degree::Poly((pairs.len() - 1) as u128))
    }

    #[test]
    fn test_zerofier() {
        let domain = [0, 5, 2, 5, 5, 1]
            .iter()
            .map(|x: &i32| IntPG::from(*x))
            .collect();

        let res = Polynomial::zerofier(&domain);

        for x in domain {
            assert_eq!(res.evaluate(&x), IntPG::ZERO);
        }
    }
}
